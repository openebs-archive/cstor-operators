---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml
    - /mnt/parameters.yml

  tasks:
    - block:
            
          ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /e2e-tests/utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

          # Create test name append with run_id 
        - include_tasks: /e2e-tests/utils/fcm/create_testname.yml  

        - name: Identify the data consistency util to be invoked
          template:
             src: data_persistence.j2
             dest: data_persistence.yml

        - name: Identify the chaos util to be invoked 
          template:
             src: chaosutil.j2
             dest: chaosutil.yml

        - include_vars:
            file: data_persistence.yml

        - include_vars:
            file: chaosutil.yml

        - name: Record the chaos util path
          set_fact: 
            chaos_util_path: "/e2e-tests/chaoslib/{{ chaosutil }}"

        - name: Record the data consistency util path
          set_fact:
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''    

        ## RECORD START-OF-TEST IN E2E RESULT CR

        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "target-network-delay"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60 

        - name: Get application pod name 
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name    

        - name: Create some test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"  
          when: data_persistence != ''    
        
        - name: Derive PV from application PVC 
          shell: >
            kubectl get pvc {{ pvc }}
            -o custom-columns=:spec.volumeName -n {{ namespace }}
            --no-headers
          args:
            executable: /bin/bash
          register: pv

        - name: Pick a cStor target pod belonging to the PV
          shell: >
            kubectl get pods -l openebs.io/target=cstor-target
            -n {{ operator_ns }} --no-headers | grep {{ pv.stdout }}
            | shuf -n1 | awk '{print $1}'
          args:
            executable: /bin/bash
          register: cstor_target_pod

        ## STORAGE FAULT INJECTION 

        - include: "{{ chaos_util_path }}"
          vars:
            app_ns: "{{ namespace }}"
            app_pvc: "{{ pvc }}"
            network_delay: "{{ n_delay }}"
            chaos_duration: "{{ c_duration }}"
          when: cri == 'docker'

        - include: "{{ chaos_util_path }}"
          vars:
            status: "induce"
            target_pod: "{{ cstor_target_pod.stdout }}"
            operator_namespace: "{{ operator_ns }}"
            containername: "cstor-istgt"
          when: 
            - cri == 'cri-o'

        - include: "{{ chaos_util_path }}"
          vars:
            status: "induce"
            target_pod: "{{ cstor_target_pod.stdout }}"
            operator_namespace: "{{ operator_ns }}"
            containername: "cstor-istgt"
          when:
            - cri == 'containerd'              

        - name: Wait for 10s post fault injection 
          wait_for:
            timeout: 10

        - include: "{{ chaos_util_path }}"
          vars:
            status: "remove"
            target_pod: "{{ cstor_target_pod.stdout }}"
            operator_namespace: "{{ operator_ns }}"
            containername: "cstor-istgt"
          when: 
            - cri == 'cri-o'  

        - include: "{{ chaos_util_path }}"
          vars:
            status: "remove"
            target_pod: "{{ cstor_target_pod.stdout }}"
            operator_namespace: "{{ operator_ns }}"
            containername: "cstor-istgt"
          when:
            - cri == 'containerd'             
            
        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60 
            
        - include_tasks: /e2e-tests/utils/k8s/application_liveness_check.yml
          when: liveness_label != ''
    
        - name: Verify application data persistence  
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''      
        
        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN E2E RESULT CR
 
        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: "target-network-delay"
