- block:

   - name: Checking application pod is in running state
     shell: kubectl get pods -n {{ ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ pod_name }}")].status.phase}'
     register: result
     until: "((result.stdout.split()|unique)|length) == 1 and 'Running' in result.stdout"
     delay: 2
     retries: 150

   - name: Get the container status of application.
     shell: >
        kubectl get pods -n {{ ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ pod_name }}")].status.containerStatuses[].state}' | grep running
     args:
       executable: /bin/bash
     register: containerStatus
     until: "'running' in containerStatus.stdout"
     delay: 2
     retries: 150

   - name: Check if db is ready for connections
     shell: kubectl logs {{ pod_name }} -n {{ ns }} | grep 'ready for connections'
     register: initcheck
     until: "'ready for connections' in initcheck.stdout"
     delay: 5
     retries: 180

   - name: Checking for the Corrupted tables
     shell: >
       kubectl exec {{ pod_name }} -n {{ ns }}
       -- mysqlcheck -c {{ dbname }} -u{{ dbuser }} -p{{ dbpassword }}
     args:
       executable: /bin/bash
     register: status 
     failed_when: "'OK' not in status.stdout"

   - name: Verify mysql data persistence 
     shell: >
           kubectl exec {{ pod_name }} -n {{ ns }}
           -- mysql -u{{ dbuser }} -p{{ dbpassword }} -e 'select * from ttbl' {{ dbname }};
     args:
       executable: /bin/bash
     register: result 
     failed_when: "'tdata' not in result.stdout"   

  when: data_persistence == "mysql"

- block:

   - name: Checking application pod is in running state
     shell: kubectl get pods -n {{ ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ pod_name }}")].status.phase}'
     register: result
     until: "((result.stdout.split()|unique)|length) == 1 and 'Running' in result.stdout"
     delay: 2
     retries: 150

   - name: Get the container status of application.
     shell: >
        kubectl get pods -n {{ ns }} -o jsonpath='{.items[?(@.metadata.name=="{{ pod_name }}")].status.containerStatuses[].state}' | grep running
     args:
       executable: /bin/bash
     register: containerStatus
     until: "'running' in containerStatus.stdout"
     delay: 2
     retries: 150

   - name: Check the md5sum of stored data file
     shell: >
       kubectl exec {{ pod_name }} -n {{ ns }}
       -- sh -c "md5sum /busybox/{{ testfile }} > /busybox/{{ testfile }}-post-chaos-md5"
     args:
       executable: /bin/bash
     register: status 
     failed_when: "status.rc != 0"

   - name: Verify whether data is consistent
     shell: >
           kubectl exec {{ pod_name }} -n {{ ns }}
           -- sh -c "diff /busybox/{{ testfile }}-pre-chaos-md5 /busybox/{{ testfile }}-post-chaos-md5"
     args:
       executable: /bin/bash
     register: result 
     failed_when: "result.rc != 0 or result.stdout != ''"   

  when: data_persistence == "busybox"  
