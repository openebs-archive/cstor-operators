---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

        ## PRE-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /e2e-tests/utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        ## RECORD START-OF-TEST IN E2E RESULT CR
        - include_tasks: /e2e-tests/utils/fcm/create_testname.yml

        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'SOT'
            chaostype: "taint-node"
            app: ""

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: app_pod_name
    
        - name: Generate unique string for use in dbname
          shell: echo $(mktemp) | cut -d '.' -f 2
          args:
            executable: /bin/bash
          register: uniqstr

        - name: Create some test data in the mysql database
          include_tasks: "/e2e-tests/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        ## STORAGE FAULT INJECTION 

        - include_tasks: /e2e-tests/chaoslib/kubectl/pod_evict_by_taint.yaml
          vars:
            action: "taint"      
            app_ns: "{{ namespace }}"
            app: "{{ app_pod_name.stdout }}"

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/e2e-tests/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}"
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"
            delay: 5
            retries: 60

        ## POST-CHAOS APPLICATION LIVENESS CHECK
        - include_tasks: /e2e-tests/utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        - name: Get application pod name
          shell: >
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o=custom-columns=NAME:".metadata.name"
          args:
            executable: /bin/bash
          register: rescheduled_app_pod 

        - name: Verify mysql data persistence
          include_tasks: "/e2e-tests/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ rescheduled_app_pod.stdout }}"
            dbuser: 'root'
            dbpassword: 'k8sDem0'
            dbname: "tdb{{ uniqstr.stdout }}"
          when: data_persistance != ''

        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 

        ## RECORD END-OF-TEST IN E2E RESULT CR
        - name: Untaint the application node
          shell: >
            kubectl taint node {{ app_node }}
            {{ taint }}:NoExecute-
          args:
            executable: /bin/bash
          register: result
          failed_when: "'untainted' not in result.stdout"

        - include_tasks: /e2e-tests/utils/fcm/update_e2e_result_resource.yml
          vars:
            status: 'EOT'
            chaostype: "taint-node"
            app: "" 
