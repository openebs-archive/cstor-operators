/*
Copyright 2020 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vlist

import (
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/cstor-operators/pkg/zcmd/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "list"
)

// VolumeList defines structure for volume 'Stats' operation
type VolumeList struct {
	//list of property
	PropList []string

	//name of dataset on which snapshot should be taken
	Dataset string

	// command string
	Command string

	// scripted mode. Will not display headers, and separate fields by a single tab instead of arbitrary space
	IsScriptedMode bool

	// Display numbers in parsable (exact) values
	IsParsableMode bool

	// Field list to display
	FieldList []string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// Executor executes zfs commands
	Executor bin.Executor
	// error
	err error
}

// NewVolumeList returns new instance of object VolumeList
func NewVolumeList() *VolumeList {
	return &VolumeList{}
}

// WithCheck add given check to checks list
func (v *VolumeList) WithCheck(check ...PredicateFunc) *VolumeList {
	v.checks = append(v.checks, check...)
	return v
}

// WithProperty method fills the Proplist field of VolumeList object.
func (v *VolumeList) WithProperty(key string) *VolumeList {
	v.PropList = append(v.PropList, key)
	return v
}

// WithField method fills the FieldList field of VolumeList object.
func (v *VolumeList) WithField(field string) *VolumeList {
	v.FieldList = append(v.FieldList, field)
	return v
}

// WithDataset method fills the Dataset field of VolumeList object.
func (v *VolumeList) WithDataset(Dataset string) *VolumeList {
	v.Dataset = Dataset
	return v
}

// WithCommand method fills the Command field of VolumeList object.
func (v *VolumeList) WithCommand(Command string) *VolumeList {
	v.Command = Command
	return v
}

// WithScriptedMode method update the IsScriptedMode field of VolumeList object.
func (v *VolumeList) WithScriptedMode(IsScriptedMode bool) *VolumeList {
	v.IsScriptedMode = IsScriptedMode
	return v
}

// WithParsableMode method update the IsParsableMode field of VolumeList object.
func (v *VolumeList) WithParsableMode(IsParsableMode bool) *VolumeList {
	v.IsParsableMode = IsParsableMode
	return v
}

// WithExecutor method fills the Executor field of VolumeList object.
func (v *VolumeList) WithExecutor(executor bin.Executor) *VolumeList {
	v.Executor = executor
	return v
}

// Validate is to validate generated VolumeList object by builder
func (v *VolumeList) Validate() *VolumeList {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeList object
func (v *VolumeList) Execute() ([]byte, error) {
	var out []byte
	var err error
	v, err = v.Build()
	if err != nil {
		return nil, err
	}

	if IsExecutorSet()(v) {
		out, err = v.Executor.Execute(v.Command)
	} else {
		// execute command here
		// #nosec
		out, err = exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
	}
	if err != nil {
		return nil, errors.Wrapf(err, "%s", string(out))
	}
	return out, nil
}

// Build returns the VolumeList object generated by builder
func (v *VolumeList) Build() (*VolumeList, error) {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)

	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsScriptedModeSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -H "))
	}

	if IsParsableModeSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -p "))
	}

	if IsFieldListSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" -o "))
		for _, f := range v.FieldList {
			v.appendCommand(&c, fmt.Sprintf("%s,", f))
		}
		// add space to separate next arg
		v.appendCommand(&c, fmt.Sprintf(" "))
	}

	if IsProplistSet()(v) {
		for _, p := range v.PropList {
			v.appendCommand(&c, fmt.Sprintf(" -o %s", p))
		}
	}

	if IsDatasetSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" %s ", v.Dataset))
	}

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeList) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
