/*
Copyright 2020 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vlistsnap

import (
	"encoding/json"
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/cstor-operators/pkg/zcmd/bin"
	"github.com/pkg/errors"
)

type VolumeListSnapshot struct {
	//name of dataset on which snapshot should be taken
	Dataset string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// error
	err error

	// Command  command needs to be executed
	Command string
}

const (
	// Operation defines type of zfs operation
	Operation = "listsnap"
)

// SnapshotList is used to convert json format into go structure
type SnapshotList struct {
	Name     string            `json:"name"`
	SnapList map[string]string `json:"snaplist"`
}

// NewVolumeListSnapshot initilize the VolumeListSnapshot
func NewVolumeListSnapshot() *VolumeListSnapshot {
	return &VolumeListSnapshot{}
}

// WithCheck add given check to checks list
func (v *VolumeListSnapshot) WithCheck(check ...PredicateFunc) *VolumeListSnapshot {
	v.checks = append(v.checks, check...)
	return v
}

// WithDataset method fills the Dataset field of VolumeListSnapshot object.
func (v *VolumeListSnapshot) WithDataset(Dataset string) *VolumeListSnapshot {
	v.Dataset = Dataset
	return v
}

// Validate is to validate generated VolumeListSnapshot object by builder
func (v *VolumeListSnapshot) Validate() *VolumeListSnapshot {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeListSnapshot object
func (v *VolumeListSnapshot) Execute() (SnapshotList, error) {
	var snapshotList SnapshotList
	v, err := v.Build()
	if err != nil {
		return snapshotList, err
	}

	// CombinedOutput returns error: "exit code: 1".
	// If the command is terminated with non-zero code.

	// execute command here
	// #nosec
	ret, err := exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
	if err != nil {
		return snapshotList, errors.Errorf("Output: %s Error: %s", string(ret), err.Error())
	}

	err = json.Unmarshal(ret, &snapshotList)
	return snapshotList, err
}

// Build returns the VolumeListSnapshot object generated by builder
func (v *VolumeListSnapshot) Build() (*VolumeListSnapshot, error) {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)

	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	v.appendCommand(&c, v.Dataset)

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeListSnapshot) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
