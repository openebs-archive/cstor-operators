/*
Copyright 2020 The OpenEBS Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package vstats

import (
	"encoding/json"
	"fmt"
	"os/exec"
	"reflect"
	"runtime"
	"strings"

	"github.com/openebs/cstor-operators/pkg/zcmd/bin"
	"github.com/pkg/errors"
)

const (
	// Operation defines type of zfs operation
	Operation = "stats"
)

// VolumeStats defines structure for volume 'Stats' operation
type VolumeStats struct {
	//list of property
	Proplist []string

	//name of dataset on which snapshot should be taken
	Dataset string

	// command string
	Command string

	// checks is list of predicate function used for validating object
	checks []PredicateFunc

	// Executor is used to execute zfs commands
	Executor bin.Executor

	// error
	err error
}

// NewVolumeStats returns new instance of object VolumeStats
func NewVolumeStats() *VolumeStats {
	return &VolumeStats{}
}

// WithCheck add given check to checks list
func (v *VolumeStats) WithCheck(check ...PredicateFunc) *VolumeStats {
	v.checks = append(v.checks, check...)
	return v
}

// WithProperty method fills the Proplist field of VolumeStats object.
func (v *VolumeStats) WithProperty(key string) *VolumeStats {
	v.Proplist = append(v.Proplist, key)
	return v
}

// WithDataset method fills the Dataset field of VolumeStats object.
func (v *VolumeStats) WithDataset(Dataset string) *VolumeStats {
	v.Dataset = Dataset
	return v
}

// WithCommand method fills the Command field of VolumeStats object.
func (v *VolumeStats) WithCommand(Command string) *VolumeStats {
	v.Command = Command
	return v
}

// WithExecutor method fills the Executor field of VolumeStats object.
func (v *VolumeStats) WithExecutor(executor bin.Executor) *VolumeStats {
	v.Executor = executor
	return v
}

// Validate is to validate generated VolumeStats object by builder
func (v *VolumeStats) Validate() *VolumeStats {
	for _, check := range v.checks {
		if !check(v) {
			v.err = errors.Wrapf(v.err, "validation failed {%v}", runtime.FuncForPC(reflect.ValueOf(check).Pointer()).Name())
		}
	}
	return v
}

// Execute is to execute generated VolumeStats object
func (v *VolumeStats) Execute() (*ZFSStats, error) {
	var zStats ZFSStats
	var out []byte
	var err error
	v, err = v.Build()
	if err != nil {
		return nil, err
	}
	if IsExecutorSet()(v) {
		out, err = v.Executor.Execute(v.Command)
	} else {
		// execute command here
		// #nosec
		out, err = exec.Command(bin.BASH, "-c", v.Command).CombinedOutput()
	}
	if err != nil {
		return nil, errors.Wrapf(err, "%s", string(out))
	}

	err = json.Unmarshal(out, &zStats)
	if err != nil {
		return nil, errors.Wrapf(err, "failed to unmarshal %s", string(out))
	}
	return &zStats, nil
}

// Build returns the VolumeStats object generated by builder
func (v *VolumeStats) Build() (*VolumeStats, error) {
	var c strings.Builder
	v = v.Validate()
	v.appendCommand(&c, bin.ZFS)

	v.appendCommand(&c, fmt.Sprintf(" %s ", Operation))

	if IsProplistSet()(v) {
		for _, p := range v.Proplist {
			v.appendCommand(&c, fmt.Sprintf(" -o %s", p))
		}
	}

	if IsDatasetSet()(v) {
		v.appendCommand(&c, fmt.Sprintf(" %s ", v.Dataset))
	}

	v.Command = c.String()
	return v, v.err
}

// appendCommand append string to given string builder
func (v *VolumeStats) appendCommand(c *strings.Builder, cmd string) {
	_, err := c.WriteString(cmd)
	if err != nil {
		v.err = errors.Wrapf(v.err, "Failed to append cmd{%s} : %s", cmd, err.Error())
	}
}
